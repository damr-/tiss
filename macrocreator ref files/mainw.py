from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.resize(450, 425)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(150, 150))
        MainWindow.setMaximumSize(QtCore.QSize(9000, 9000))
        MainWindow.setFocusPolicy(QtCore.Qt.NoFocus)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/resources/icons/resources/favicon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.0)
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralWidget.sizePolicy().hasHeightForWidth())
        self.centralWidget.setSizePolicy(sizePolicy)
        self.centralWidget.setObjectName("centralWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralWidget)
        self.gridLayout.setContentsMargins(11, 11, 11, 11)
        self.gridLayout.setSpacing(6)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.cmdList = QtWidgets.QListWidget(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cmdList.sizePolicy().hasHeightForWidth())
        self.cmdList.setSizePolicy(sizePolicy)
        self.cmdList.setMinimumSize(QtCore.QSize(50, 50))
        self.cmdList.setMaximumSize(QtCore.QSize(9000, 9000))
        self.cmdList.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cmdList.setFont(font)
        self.cmdList.setWhatsThis("")
        self.cmdList.setStyleSheet("selection-background-color: rgb(159, 181, 255);")
        self.cmdList.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.cmdList.setAutoScrollMargin(1)
        self.cmdList.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.cmdList.setProperty("showDropIndicator", True)
        self.cmdList.setDragEnabled(True)
        self.cmdList.setDragDropOverwriteMode(True)
        self.cmdList.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.cmdList.setDefaultDropAction(QtCore.Qt.MoveAction)
        self.cmdList.setAlternatingRowColors(False)
        self.cmdList.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.cmdList.setResizeMode(QtWidgets.QListView.Adjust)
        self.cmdList.setUniformItemSizes(False)
        self.cmdList.setObjectName("cmdList")
        self.verticalLayout.addWidget(self.cmdList)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 450, 21))
        self.menuBar.setObjectName("menuBar")
        self.menuFile = QtWidgets.QMenu(self.menuBar)
        self.menuFile.setToolTipsVisible(True)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menuBar)
        self.menuEdit.setToolTipsVisible(True)
        self.menuEdit.setObjectName("menuEdit")
        self.menuAdd = QtWidgets.QMenu(self.menuBar)
        self.menuAdd.setToolTipsVisible(True)
        self.menuAdd.setObjectName("menuAdd")
        MainWindow.setMenuBar(self.menuBar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setSizeGripEnabled(False)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setOrientation(QtCore.Qt.Horizontal)
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionFNew = QtWidgets.QAction(MainWindow)
        self.actionFNew.setShortcutVisibleInContextMenu(True)
        self.actionFNew.setObjectName("actionFNew")
        self.actionFExit = QtWidgets.QAction(MainWindow)
        self.actionFExit.setObjectName("actionFExit")
        self.actionFSave = QtWidgets.QAction(MainWindow)
        self.actionFSave.setObjectName("actionFSave")
        self.actionFOpen = QtWidgets.QAction(MainWindow)
        self.actionFOpen.setObjectName("actionFOpen")
        self.actionFSaveAs = QtWidgets.QAction(MainWindow)
        self.actionFSaveAs.setObjectName("actionFSaveAs")
        self.actionEDelete = QtWidgets.QAction(MainWindow)
        self.actionEDelete.setShortcutVisibleInContextMenu(True)
        self.actionEDelete.setObjectName("actionEDelete")
        self.actionEDuplicate = QtWidgets.QAction(MainWindow)
        self.actionEDuplicate.setShortcutVisibleInContextMenu(True)
        self.actionEDuplicate.setObjectName("actionEDuplicate")
        self.actionECopy = QtWidgets.QAction(MainWindow)
        self.actionECopy.setShortcutVisibleInContextMenu(True)
        self.actionECopy.setObjectName("actionECopy")
        self.actionECut = QtWidgets.QAction(MainWindow)
        self.actionECut.setShortcutVisibleInContextMenu(True)
        self.actionECut.setObjectName("actionECut")
        self.actionEPaste = QtWidgets.QAction(MainWindow)
        self.actionEPaste.setShortcutVisibleInContextMenu(True)
        self.actionEPaste.setObjectName("actionEPaste")
        self.action1Delay = QtWidgets.QAction(MainWindow)
        self.action1Delay.setShortcutVisibleInContextMenu(True)
        self.action1Delay.setObjectName("action1Delay")
        self.action4Click = QtWidgets.QAction(MainWindow)
        self.action4Click.setShortcutVisibleInContextMenu(True)
        self.action4Click.setObjectName("action4Click")
        self.action3CursorPos = QtWidgets.QAction(MainWindow)
        self.action3CursorPos.setShortcutVisibleInContextMenu(True)
        self.action3CursorPos.setObjectName("action3CursorPos")
        self.action7Drag = QtWidgets.QAction(MainWindow)
        self.action7Drag.setShortcutVisibleInContextMenu(True)
        self.action7Drag.setObjectName("action7Drag")
        self.action8Scroll = QtWidgets.QAction(MainWindow)
        self.action8Scroll.setShortcutVisibleInContextMenu(True)
        self.action8Scroll.setObjectName("action8Scroll")
        self.action6Write = QtWidgets.QAction(MainWindow)
        self.action6Write.setShortcutVisibleInContextMenu(True)
        self.action6Write.setObjectName("action6Write")
        self.action5PressKey = QtWidgets.QAction(MainWindow)
        self.action5PressKey.setShortcutVisibleInContextMenu(True)
        self.action5PressKey.setObjectName("action5PressKey")
        self.action9RunExe = QtWidgets.QAction(MainWindow)
        self.action9RunExe.setShortcutVisibleInContextMenu(True)
        self.action9RunExe.setObjectName("action9RunExe")
        self.actionRStart = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/resources/icons/resources/icons/start.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRStart.setIcon(icon1)
        self.actionRStart.setAutoRepeat(False)
        self.actionRStart.setShortcutVisibleInContextMenu(False)
        self.actionRStart.setObjectName("actionRStart")
        self.actionRPause = QtWidgets.QAction(MainWindow)
        self.actionRPause.setVisible(False)
        self.actionRPause.setObjectName("actionRPause")
        self.actionRStop = QtWidgets.QAction(MainWindow)
        self.actionRStop.setVisible(False)
        self.actionRStop.setObjectName("actionRStop")
        self.action2Goto = QtWidgets.QAction(MainWindow)
        self.action2Goto.setShortcutVisibleInContextMenu(True)
        self.action2Goto.setObjectName("action2Goto")
        self.actionEToggleDisabled = QtWidgets.QAction(MainWindow)
        self.actionEToggleDisabled.setShortcutVisibleInContextMenu(True)
        self.actionEToggleDisabled.setObjectName("actionEToggleDisabled")
        self.action10ApplyRegex = QtWidgets.QAction(MainWindow)
        self.action10ApplyRegex.setStatusTip("")
        self.action10ApplyRegex.setShortcutVisibleInContextMenu(True)
        self.action10ApplyRegex.setObjectName("action10ApplyRegex")
        self.menuFile.addAction(self.actionFNew)
        self.menuFile.addAction(self.actionFOpen)
        self.menuFile.addAction(self.actionFSave)
        self.menuFile.addAction(self.actionFSaveAs)
        self.menuFile.addAction(self.actionFExit)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionECopy)
        self.menuEdit.addAction(self.actionECut)
        self.menuEdit.addAction(self.actionEPaste)
        self.menuEdit.addAction(self.actionEDuplicate)
        self.menuEdit.addAction(self.actionEDelete)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionEToggleDisabled)
        self.menuAdd.addAction(self.action1Delay)
        self.menuAdd.addAction(self.action2Goto)
        self.menuAdd.addSeparator()
        self.menuAdd.addAction(self.action3CursorPos)
        self.menuAdd.addAction(self.action4Click)
        self.menuAdd.addAction(self.action5PressKey)
        self.menuAdd.addAction(self.action6Write)
        self.menuAdd.addAction(self.action7Drag)
        self.menuAdd.addAction(self.action8Scroll)
        self.menuAdd.addAction(self.action9RunExe)
        self.menuAdd.addAction(self.action10ApplyRegex)
        self.menuBar.addAction(self.menuFile.menuAction())
        self.menuBar.addAction(self.menuEdit.menuAction())
        self.menuBar.addAction(self.menuAdd.menuAction())
        self.toolBar.addAction(self.actionRStart)
        self.toolBar.addSeparator()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Macro Creator"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuAdd.setTitle(_translate("MainWindow", "Add"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionFNew.setText(_translate("MainWindow", "New"))
        self.actionFNew.setToolTip(_translate("MainWindow", "Create new macro or open an existing one"))
        self.actionFNew.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionFExit.setText(_translate("MainWindow", "Exit"))
        self.actionFExit.setToolTip(_translate("MainWindow", "Exit the program"))
        self.actionFExit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionFSave.setText(_translate("MainWindow", "Save"))
        self.actionFSave.setToolTip(_translate("MainWindow", "Save the macro"))
        self.actionFSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionFOpen.setText(_translate("MainWindow", "Open"))
        self.actionFOpen.setToolTip(_translate("MainWindow", "Open an already existing macro"))
        self.actionFOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionFSaveAs.setText(_translate("MainWindow", "Save As..."))
        self.actionFSaveAs.setToolTip(_translate("MainWindow", "Save the macro to a new file"))
        self.actionFSaveAs.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))
        self.actionEDelete.setText(_translate("MainWindow", "Delete"))
        self.actionEDelete.setToolTip(_translate("MainWindow", "Delete the selected command(s)"))
        self.actionEDelete.setShortcut(_translate("MainWindow", "Del"))
        self.actionEDuplicate.setText(_translate("MainWindow", "Duplicate"))
        self.actionEDuplicate.setToolTip(_translate("MainWindow", "Duplicate the selected command(s)"))
        self.actionEDuplicate.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.actionECopy.setText(_translate("MainWindow", "Copy"))
        self.actionECopy.setToolTip(_translate("MainWindow", "Cop ythe selected command(s)"))
        self.actionECopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionECut.setText(_translate("MainWindow", "Cut"))
        self.actionECut.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionEPaste.setText(_translate("MainWindow", "Paste"))
        self.actionEPaste.setShortcut(_translate("MainWindow", "Ctrl+V"))
        self.action1Delay.setText(_translate("MainWindow", "Delay"))
        self.action1Delay.setToolTip(_translate("MainWindow", "Add a delay"))
        self.action1Delay.setShortcut(_translate("MainWindow", "Ctrl+1"))
        self.action4Click.setText(_translate("MainWindow", "Click"))
        self.action4Click.setToolTip(_translate("MainWindow", "Add a \'Mouse click\' command"))
        self.action4Click.setShortcut(_translate("MainWindow", "Ctrl+4"))
        self.action3CursorPos.setText(_translate("MainWindow", "Cursor position"))
        self.action3CursorPos.setToolTip(_translate("MainWindow", "Add a command to set the curor position"))
        self.action3CursorPos.setShortcut(_translate("MainWindow", "Ctrl+3"))
        self.action7Drag.setText(_translate("MainWindow", "Drag"))
        self.action7Drag.setToolTip(_translate("MainWindow", "Add a command to drag the mouse cursor"))
        self.action8Scroll.setText(_translate("MainWindow", "Scroll"))
        self.action8Scroll.setToolTip(_translate("MainWindow", "Add a command to scroll the mouse wheel"))
        self.action6Write.setText(_translate("MainWindow", "Write text"))
        self.action6Write.setToolTip(_translate("MainWindow", "Add a command to write a text"))
        self.action5PressKey.setText(_translate("MainWindow", "Press key"))
        self.action5PressKey.setToolTip(_translate("MainWindow", "Add a command to press a key"))
        self.action9RunExe.setText(_translate("MainWindow", "Run .exe"))
        self.action9RunExe.setToolTip(_translate("MainWindow", "Add a command to run an \'.exe\'"))
        self.actionRStart.setText(_translate("MainWindow", "Start"))
        self.actionRStart.setToolTip(_translate("MainWindow", "Start the macro"))
        self.actionRPause.setText(_translate("MainWindow", "Pause"))
        self.actionRPause.setToolTip(_translate("MainWindow", "Pause the macro"))
        self.actionRStop.setText(_translate("MainWindow", "Stop"))
        self.actionRStop.setToolTip(_translate("MainWindow", "Stop the macro"))
        self.action2Goto.setText(_translate("MainWindow", "Goto"))
        self.action2Goto.setToolTip(_translate("MainWindow", "Add a Goto command"))
        self.action2Goto.setShortcut(_translate("MainWindow", "Ctrl+2"))
        self.actionEToggleDisabled.setText(_translate("MainWindow", "Toggle Disabled"))
        self.actionEToggleDisabled.setToolTip(_translate("MainWindow", "Toggle the disabled state of the selected command(s)"))
        self.actionEToggleDisabled.setShortcut(_translate("MainWindow", "Ctrl+Shift+D"))
        self.action10ApplyRegex.setText(_translate("MainWindow", "Apply Regex"))
        self.action10ApplyRegex.setToolTip(_translate("MainWindow", "<html><head/><body><p>Add a command to apply the given regex to the selected text.</p><p>By default, the first result will be stored in the clipboard.</p></body></html>"))
import resources_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
